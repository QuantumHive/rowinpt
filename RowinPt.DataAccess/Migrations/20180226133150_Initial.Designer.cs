// <auto-generated />
using AlperAslanApps.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using RowinPt.DataAccess;
using System;

namespace RowinPt.DataAccess.Migrations
{
    [DbContext(typeof(RowinPtContext))]
    [Migration("20180226133150_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RowinPt.Domain.AgendaModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid>("ScheduleItemId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScheduleItemId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("RowinPt.Domain.CourseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("Capacity");

                    b.Property<Guid>("CourseTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("RowinPt.Domain.CourseTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("Capacity");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("RowinPt.Domain.LocationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RowinPt.Domain.MeasurementModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<float?>("ArmSize");

                    b.Property<float?>("BellySize");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<float?>("FatPercentage");

                    b.Property<float?>("ShoulderSize");

                    b.Property<float?>("UpperLegSize");

                    b.Property<float?>("WaistSize");

                    b.Property<float?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("RowinPt.Domain.ScheduleItemModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CourseId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<Guid?>("PersonalTrainerId");

                    b.Property<Guid>("ScheduleId");

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PersonalTrainerId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleItems");
                });

            modelBuilder.Entity("RowinPt.Domain.ScheduleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("RowinPt.Domain.SubscriptionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CourseTypeId");

                    b.Property<Guid>("CustomerId");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("WeeklyCredits");

                    b.HasKey("Id");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("RowinPt.Domain.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .IsRequired();

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<Guid>("SecurityStamp");

                    b.Property<byte>("Sex");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserModel");
                });

            modelBuilder.Entity("RowinPt.Domain.CustomerModel", b =>
                {
                    b.HasBaseType("RowinPt.Domain.UserModel");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<int?>("Length");

                    b.Property<string>("Number");

                    b.ToTable("CustomerModel");

                    b.HasDiscriminator().HasValue("CustomerModel");
                });

            modelBuilder.Entity("RowinPt.Domain.PersonalTrainerModel", b =>
                {
                    b.HasBaseType("RowinPt.Domain.UserModel");

                    b.Property<bool>("Admin");

                    b.ToTable("PersonalTrainerModel");

                    b.HasDiscriminator().HasValue("PersonalTrainerModel");
                });

            modelBuilder.Entity("RowinPt.Domain.AgendaModel", b =>
                {
                    b.HasOne("RowinPt.Domain.CustomerModel", "Customer")
                        .WithMany("Agenda")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RowinPt.Domain.ScheduleItemModel", "ScheduleItem")
                        .WithMany("Agenda")
                        .HasForeignKey("ScheduleItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid?>("AgendaModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("Agenda");

                            b1.HasOne("RowinPt.Domain.AgendaModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "AgendaModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RowinPt.Domain.CourseModel", b =>
                {
                    b.HasOne("RowinPt.Domain.CourseTypeModel", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid?>("CourseModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("Courses");

                            b1.HasOne("RowinPt.Domain.CourseModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "CourseModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RowinPt.Domain.CourseTypeModel", b =>
                {
                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid?>("CourseTypeModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("CourseTypes");

                            b1.HasOne("RowinPt.Domain.CourseTypeModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "CourseTypeModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RowinPt.Domain.LocationModel", b =>
                {
                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid?>("LocationModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("Locations");

                            b1.HasOne("RowinPt.Domain.LocationModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "LocationModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RowinPt.Domain.MeasurementModel", b =>
                {
                    b.HasOne("RowinPt.Domain.CustomerModel", "Customer")
                        .WithMany("Measurements")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid?>("MeasurementModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("Measurements");

                            b1.HasOne("RowinPt.Domain.MeasurementModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "MeasurementModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RowinPt.Domain.ScheduleItemModel", b =>
                {
                    b.HasOne("RowinPt.Domain.CourseModel", "Course")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RowinPt.Domain.PersonalTrainerModel", "PersonalTrainer")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("PersonalTrainerId");

                    b.HasOne("RowinPt.Domain.ScheduleModel", "Schedule")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid?>("ScheduleItemModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("ScheduleItems");

                            b1.HasOne("RowinPt.Domain.ScheduleItemModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "ScheduleItemModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RowinPt.Domain.ScheduleModel", b =>
                {
                    b.HasOne("RowinPt.Domain.LocationModel", "Location")
                        .WithMany("Schedules")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid?>("ScheduleModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("Schedule");

                            b1.HasOne("RowinPt.Domain.ScheduleModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "ScheduleModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RowinPt.Domain.SubscriptionModel", b =>
                {
                    b.HasOne("RowinPt.Domain.CourseTypeModel", "CourseType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RowinPt.Domain.CustomerModel", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid?>("SubscriptionModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("Subscriptions");

                            b1.HasOne("RowinPt.Domain.SubscriptionModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "SubscriptionModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("RowinPt.Domain.UserModel", b =>
                {
                    b.OwnsOne("AlperAslanApps.Core.Models.EditInfo", "EditInfo", b1 =>
                        {
                            b1.Property<Guid>("UserModelId");

                            b1.Property<string>("CreatedBy")
                                .IsRequired();

                            b1.Property<DateTime>("CreatedOn");

                            b1.Property<string>("EditedBy")
                                .IsRequired();

                            b1.Property<DateTime>("EditedOn");

                            b1.ToTable("Users");

                            b1.HasOne("RowinPt.Domain.UserModel")
                                .WithOne("EditInfo")
                                .HasForeignKey("AlperAslanApps.Core.Models.EditInfo", "UserModelId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
